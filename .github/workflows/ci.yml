name: Build and tests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  RUSTC_WRAPPER: sccache
  SCCACHE_DIR: /home/runner/.cache/sccache

jobs:
  build-and-test:
    strategy:
      matrix:
        postgres: [ 14, 15, 16, 17 ]
        runs_on: [ 'ubuntu-22.04', 'ubuntu-22.04-arm' ]
        include:
          - runs_on: ubuntu-22.04
            arch: x64
          - runs_on: ubuntu-22.04-arm
            arch: arm64

    runs-on: ${{ matrix.runs_on }}

    env:
      PG_MAJOR: ${{ matrix.postgres }}
      PG_CONFIG: /usr/lib/postgresql/${{ matrix.postgres }}/bin/pg_config

    steps:
      - uses: actions/checkout@v4

      - name: Set up sccache for x86_64
        if: ${{ matrix.arch == 'x64' }}
        run: |
          wget https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz
          tar -xzf sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz
          sudo mv sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl/sccache /usr/local/bin
          chmod +x /usr/local/bin/sccache
          echo "$SCCACHE_SHA256  /usr/local/bin/sccache" | sha256sum --check
        env:
          SCCACHE_VERSION: 0.8.1
          SCCACHE_SHA256: "7203a4dcb3a67f3a0272366d50ede22e5faa3e2a798deaa4d1ea377b51c0ab0c"

      - name: Set up sccache for arm64
        if: ${{ matrix.arch == 'arm64' }}
        run: |
          wget https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/sccache-v$SCCACHE_VERSION-aarch64-unknown-linux-musl.tar.gz
          tar -xzf sccache-v$SCCACHE_VERSION-aarch64-unknown-linux-musl.tar.gz
          sudo mv sccache-v$SCCACHE_VERSION-aarch64-unknown-linux-musl/sccache /usr/local/bin
          chmod +x /usr/local/bin/sccache
          echo "$SCCACHE_SHA256  /usr/local/bin/sccache" | sha256sum --check
        env:
          SCCACHE_VERSION: 0.8.1
          SCCACHE_SHA256: "36b2fd1c6c3a104ec1d526edb0533a3827c266054bf4552fb97f524beff6a612"

      - name: Set up Rust for x86_64
        if: ${{ matrix.arch == 'x64' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86.0
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy, llvm-tools-preview

      - name: Set up Rust for arm64
        if: ${{ matrix.arch == 'arm64' }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86.0
          target: aarch64-unknown-linux-gnu
          components: rustfmt, clippy, llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: pg_parquet-rust-cache-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}

      - name: Cache sccache directory
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: ${{ env.SCCACHE_DIR }}
          key: pg_parquet-sccache-cache-${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock', '.github/workflows/ci.yml') }}

      - name: Install PostgreSQL
        run: |
          sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install build-essential libreadline-dev zlib1g-dev flex bison libxml2-dev \
                                  libxslt-dev libssl-dev libxml2-utils xsltproc ccache pkg-config   \
                                  gnupg ca-certificates
          sudo apt-get -y install postgresql-${{ env.PG_MAJOR }}-postgis-3 \
                                  postgresql-server-dev-${{ env.PG_MAJOR }} \
                                  postgresql-client-${{ env.PG_MAJOR }} \
                                  libpq-dev
          echo "export PG_MAJOR=${{ env.PG_MAJOR }}" >> $GITHUB_ENV

      - name: Install pgaudit extension
        run: |
          sudo apt-get install -y postgresql-${{ env.PG_MAJOR }}-pgaudit

      - name: Install azure-cli
        run: |
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
          echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ `lsb_release -cs` main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update && sudo apt-get install -y azure-cli

      - name: Install pgrx
        run: |
          cargo install --locked cargo-pgrx@0.15.0

      - name: Install cargo-llvm-cov for coverage report
        run: cargo install --locked cargo-llvm-cov@0.6.12

      - name: Set up permissions for PostgreSQL
        run: |
          sudo chmod a+rwx $(/usr/lib/postgresql/${{ env.PG_MAJOR }}/bin/pg_config --pkglibdir)          \
                           $(/usr/lib/postgresql/${{ env.PG_MAJOR }}/bin/pg_config --sharedir)/extension \
                           /var/run/postgresql/

      - name: Check format and lint
        run: |
          make check-format
          make check-lint

      - name: Run tests without coverage
        if: ${{ env.PG_MAJOR != '17' || matrix.arch != 'x64' }}
        run: |
          make check

      - name: Run tests with coverage
        if: ${{ env.PG_MAJOR == '17' && matrix.arch == 'x64' }}
        run: |
          make check-with-coverage

      - name: Upload coverage report to Codecov
        if: ${{ env.PG_MAJOR == '17' && matrix.arch == 'x64' }}
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          files: ./lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
